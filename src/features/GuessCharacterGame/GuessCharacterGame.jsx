import { useState, useEffect, useMemo } from 'react';
import './GuessCharacterGame.css';
import { useGameLogic } from '../../shared/hooks/useGameLogic';
import { generateGameData } from '../../shared/utils/game';
// import { shuffleArray } from '../../shared/utils/array';
import { basicCharacters } from '../../data/characters/basic';

export const GuessCharacterGame = () => {
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
  const gameData = useMemo(() => generateGameData(basicCharacters), []);

  if (!basicCharacters  || basicCharacters .length === 0) {
    return (
      <div className="error-screen">
        <h2>–û–π! üêº</h2>
        <p>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã –∫—É–¥–∞-—Ç–æ —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å...</p>
        <button onClick={() => window.location.reload()}>
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫
  const {
    currentIndex,
    currentQuestion,
    score,
    isCompleted,
    nextQuestion,
    addScore,
    progress,
    isLastQuestion,
    shuffledAnswers
  } = useGameLogic(gameData);

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [showContinue, setShowContinue] = useState(false); // ‚Üê –î–æ–±–∞–≤–∏–ª showContinue

  const handleAnswerSelect = (answer) => {
    if (isAnswered) return;

    setSelectedAnswer(answer);
    setIsAnswered(true);
    setShowContinue(true); // ‚Üê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ö—É–∫–∞
    if (answer === currentQuestion.correctAnswer) {
      addScore(1); // –î–æ–±–∞–≤–ª—è–µ–º 1 –æ—á–∫–æ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    }
  };

  const handleContinue = () => {
    setSelectedAnswer(null);
    setIsAnswered(false);
    setShowContinue(false);
    nextQuestion(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ö—É–∫–∞
  };

  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
  if (!currentQuestion || !shuffledAnswers) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="game-screen">
      <h2>–£–≥–∞–¥–∞–π –∏–µ—Ä–æ–≥–ª–∏—Ñ!</h2>
      
      <div className="game-question">
        <img 
          src={currentQuestion.image} 
          alt="–ß—Ç–æ —ç—Ç–æ?" 
          className="question-image"
        />
        <p>–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–µ—Ä–æ–≥–ª–∏—Ñ</p>
      </div>

      <div className="answers-grid">
        {shuffledAnswers.map((answer, index) => {
          const isCorrect = answer === currentQuestion.correctAnswer;
          const isSelected = answer === selectedAnswer;
          
          let buttonClass = 'answer-button';
          if (isAnswered) {
            if (isCorrect) buttonClass += ' answer-button--correct';
            if (isSelected && !isCorrect) buttonClass += ' answer-button--incorrect';
          }

          return (
            <button
              key={index}
              className={buttonClass}
              onClick={() => handleAnswerSelect(answer)}
              disabled={isAnswered}
            >
              {answer}
            </button>
          );
        })}
      </div>

      <div className="game-info">
        <span>–í–æ–ø—Ä–æ—Å {currentIndex + 1} –∏–∑ {gameData.length}</span>
        <span>–°—á–µ—Ç: {score}</span>
        <progress value={progress} max="100">{progress}%</progress>
      </div>

      {isAnswered && (
        <div className="feedback">
          {selectedAnswer === currentQuestion.correctAnswer ? (
            <p className="feedback-correct">–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ {currentQuestion.meaning} üéâ</p>
          ) : (
            <p className="feedback-incorrect">
              –ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.correctAnswer} ({currentQuestion.meaning})
            </p>
          )}
        </div>
      )}

      {showContinue && (
        <button 
          className="continue-button"
          onClick={handleContinue}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
        </button>
      )}
    </div>
  );
};